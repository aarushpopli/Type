const select = (a) => document.querySelector(a),
    selectAll = (a) => document.querySelectorAll(a),
    input = select("#textInput"),
    output = select("#textOutput"),
    inputFull = select("#textFull"),
    _timer = select("#timer"),
    _wpm = select("#wpm"),
    _cpm = select("#cpm"),
    _errors = select("#errors"),
    _accuracy = select("#accuracy"),
    _totalWords = select("#totalWords"),
    _writtenWords = select("#writtenWords"),
    btnPaly = select("#btnPlay");
const allQuotes = [];
fetch("js/quotes.json")
    .then((a) => a.json())
    .then((a) => allQuotes.push(...a))
    .catch((a) => console.error("Error:", a));
const random = (a) => a[Math.floor(Math.random() * a.length)];
class speedTyping {
    constructor() {
        (this.index = 0),
        (this.words = 0),
        (this.errorIndex = 0),
        (this.correctIndex = 0),
        (this.accuracyIndex = 0),
        (this.cpm = 0),
        (this.wpm = 0),
        (this.interval = null),
        (this.duration = 60),
        (this.typing = !1),
        (this.quote = []),
        (this.author = []);
    }
    timer() {
        if ("number" != typeof this.interval) {
            const a = Date.now(),
                b = a + 1e3 * this.duration;
            (_timer.innerHTML = `${this.duration}<span class="small">s</span>`),
                (this.interval = setInterval(() => {
                    const c = Math.round((b - Date.now()) / 1e3);
                    (_timer.innerHTML = `${c}<span class="small">s</span>`),
                        0 === c && (this.stop(), this.finish());
                }, 1e3));
        }
    }
    start() {
        const a = allQuotes.filter((f) => "Easy" !== f.level),
            b = a.map((f) => f.quote),
            c = a.map((f) => f.author);
        (this.author = random(c)), (this.quote = random(b));
        const d = this.quote.split(" ").filter((f) => f).length;
        (_totalWords.textContent = d),
            this.timer(),
            btnPlay.classList.add("active"),
            input.setAttribute("tabindex", "0"),
            input.removeAttribute("disabled"),
            input.focus(),
            input.classList.add("active"),
            this.typing ||
            ((this.typing = !0),
                (input.textContent = this.quote),
                input.addEventListener("keypress", (f) => {
                    f.preventDefault(), (f = f || window.event);
                    const g = f.which || f.keyCode,
                        h = String.fromCharCode(g);
                    if (h === this.quote.charAt(this.index)) {
                        " " === h &&
                            32 === g &&
                            (this.words++, (_writtenWords.textContent = this.words)),
                            this.index++;
                        const j = this.quote.substring(
                            this.index,
                            this.index + this.quote.length
                        );
                        if (
                            ((input.textContent = j),
                                (output.innerHTML += h),
                                this.correctIndex++,
                                this.index === this.quote.length)
                        )
                            return this.stop(), void this.finish();
                    } else
                        (output.innerHTML += `<span class="text-danger">${h}</span>`),
                            this.errorIndex++,
                            (_errors.textContent = this.errorIndex),
                            this.correctIndex--;
                    (this.cpm =
                        5 < this.correctIndex
                            ? Math.floor(60 * (this.correctIndex / this.duration))
                            : 0),
                        (_cpm.textContent = this.cpm),
                        (this.wpm = Math.round(this.cpm / 5)),
                        (_wpm.textContent = this.wpm),
                        (this.accuracyIndex =
                            5 < this.correctIndex
                                ? Math.round((100 * this.correctIndex) / this.index)
                                : 0),
                        0 < this.accuracyIndex &&
                        Number.isInteger(this.accuracyIndex) &&
                        (_accuracy.innerHTML = `${this.accuracyIndex}<span class="small">%</span>`);
                }));
    }
    stop() {
        return (
            clearInterval(this.interval),
            (this.interval = null),
            (this.typing = !1),
            (_timer.textContent = "0"),
            btnPaly.remove(),
            input.remove(),
            inputFull.classList.remove("d-none"),
            void (inputFull.innerHTML = `&#8220;${this.quote}&#8221; <span class="d-block small text-muted text-right pr-3">&ndash; ${this.author}</span></div> `)
        );
    }
    finish() {
        const wpm = this.wpm;
        const cpm = this.cpm;
        const ei = this.errorIndex;
        const ai = this.accuracyIndex;
        localStorage.setItem('WPM', wpm);
        localStorage.setItem('CPM', cpm);
        localStorage.setItem('EI', ei);
        localStorage.setItem('AI', ai);
    }
}
const typingTest = new speedTyping();
btnPaly.addEventListener("click", () => typingTest.start());
const savedWPM = localStorage.getItem("WPM") || 0;
select("#result").innerHTML = `<li>${savedWPM}</li>`;
